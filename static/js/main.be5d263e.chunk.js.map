{"version":3,"sources":["components/Result.js","components/Counter.js","components/Round.js","components/MainMenu.js","App.js","index.js"],"names":["Title","Typography","Paragraph","Result","props","className","guessedSongs","type","onClick","restart","Counter","currentRound","allRounds","Round","useState","radioState","setRadioState","state","setState","songs","song","setSong","getFourRoundSongs","roundSongs","setRoundSongs","baseSong","fourSongs","length","randomSong","getRandomSong","existInArray","push","sort","a","b","Math","random","shuffleSongs","array","map","name","includes","floor","controls","src","preview_url","Group","onChange","e","target","value","direction","setGuessedSongs","message","success","error","warning","MainMenu","getRandomSongs","App","shouldSpin","setShouldSpin","showRound","setShowRound","showResult","setShowResult","setSongs","fetch","then","response","json","data","console","log","catch","NUMBER_OF_SONGS","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be5d263e.chunk.js","sourcesContent":["import { Typography } from \"antd\";\r\nimport { Button } from \"antd\";\r\nimport \"./Result.css\";\r\nconst { Title, Paragraph } = Typography;\r\n\r\nfunction Result(props) {\r\n  return (\r\n    <div className=\"result-window\">\r\n      <Title>Results</Title>\r\n      {props.guessedSongs === 0 && (\r\n        <Paragraph>\r\n          You haven't guessed anything, there is probably no cure for you.\r\n        </Paragraph>\r\n      )}\r\n      {props.guessedSongs === 1 && (\r\n        <Paragraph>\r\n          You have guessed literally {props.guessedSongs} song, are you baka ?\r\n        </Paragraph>\r\n      )}\r\n      {props.guessedSongs > 1 && props.guessedSongs < 10 && (\r\n        <Paragraph>\r\n          You have guessed like {props.guessedSongs} songs, are you baka ?\r\n        </Paragraph>\r\n      )}\r\n      {props.guessedSongs >= 10 && props.guessedSongs <= 15 && (\r\n        <Paragraph>\r\n          You have guessed {props.guessedSongs} songs, Not great not terrible.\r\n        </Paragraph>\r\n      )}\r\n      {props.guessedSongs > 15 && (\r\n        <Paragraph>\r\n          You have guessed {props.guessedSongs} songs, I see that you are a man\r\n          / woman of culture aswell.\r\n        </Paragraph>\r\n      )}\r\n      <Button type=\"primary\" onClick={() => props.restart()}>\r\n        Replay\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result;\r\n","import { Typography } from \"antd\";\r\nconst { Paragraph } = Typography;\r\n\r\nfunction Counter(props) {\r\n  return (\r\n    <div className=\"counter\">\r\n      <Paragraph>\r\n        Round {props.currentRound} / {props.allRounds} \r\n      </Paragraph>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Counter;\r\n","import { useState } from \"react\";\r\nimport { message } from \"antd\";\r\nimport { Radio, Space } from \"antd\";\r\nimport { Typography } from \"antd\";\r\nimport { Button } from \"antd\";\r\nimport Counter from \"./Counter.js\";\r\nimport \"./Round.css\";\r\n\r\nconst { Title } = Typography;\r\n\r\nfunction Round(props) {\r\n  const SONGS_IN_ROUND = 4;\r\n  const [radioState, setRadioState] = useState(-1);\r\n  const [state, setState] = useState(props.state);\r\n  const [song, setSong] = useState([...props.songs][state]);\r\n  const [songs] = useState([...props.songs]);\r\n  const [roundSongs, setRoundSongs] = useState(getFourRoundSongs(song));\r\n\r\n  function getFourRoundSongs(baseSong) {\r\n    let fourSongs = [baseSong];\r\n    while (fourSongs.length < SONGS_IN_ROUND) {\r\n      let randomSong = getRandomSong();\r\n      while (existInArray(randomSong, fourSongs)) randomSong = getRandomSong();\r\n\r\n      fourSongs.push(randomSong);\r\n    }\r\n    return shuffleSongs(fourSongs);\r\n  }\r\n\r\n  function existInArray(song, array) {\r\n    return array.map((song) => song.name).includes(song.name);\r\n  }\r\n\r\n  function shuffleSongs(songs) {\r\n    return songs.sort((a, b) => 0.5 - Math.random());\r\n  }\r\n\r\n  function getRandomSong() {\r\n    return songs[Math.floor(Math.random() * songs.length)];\r\n  }\r\n\r\n  function onChange(e) {\r\n    setRadioState(e.target.value);\r\n  }\r\n\r\n  function handleNextButton() {\r\n    if (radioState === -1) {\r\n      message.warning(\"You have to choose song before pressing button !\");\r\n      return;\r\n    }\r\n\r\n    if (roundSongs[radioState].name === song.name) {\r\n      props.setGuessedSongs(props.guessedSongs + 1);\r\n      message.success(\"You correctly guessed the song name !\");\r\n    } else message.error(\"You didn't guess the song name !\");\r\n\r\n    if (state === songs.length - 1) {\r\n      props.setState(state);\r\n      return;\r\n    }\r\n\r\n    setSong(songs[state + 1]);\r\n    setRoundSongs(getFourRoundSongs(songs[state + 1]));\r\n    setState(state + 1);\r\n    setRadioState(-1);\r\n  }\r\n\r\n  return (\r\n    <div className=\"round\" key={state}>\r\n      <Title>What is the given song name ?</Title>\r\n      <audio controls>\r\n        <source src={song.preview_url} type=\"audio/mpeg\" />\r\n        Your browser does not support the audio element.\r\n      </audio>\r\n      <Radio.Group onChange={onChange}>\r\n        <Space direction=\"vertical\">\r\n          <Radio value={0}>{roundSongs[0].name}</Radio>\r\n          <Radio value={1}>{roundSongs[1].name}</Radio>\r\n          <Radio value={2}>{roundSongs[2].name}</Radio>\r\n          <Radio value={3}>{roundSongs[3].name}</Radio>\r\n        </Space>\r\n      </Radio.Group>\r\n      <Button type=\"primary\" onClick={handleNextButton}>\r\n        Next\r\n      </Button>\r\n      <Counter currentRound={state} allRounds={songs.length}></Counter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Round;\r\n","import { Typography } from \"antd\";\r\nimport { Button } from \"antd\";\r\nimport \"./MainMenu.css\";\r\nconst { Title, Paragraph } = Typography;\r\n\r\nfunction MainMenu(props) {\r\n  return (\r\n    <div className=\"main-menu\">\r\n      <Title>A song guessing game</Title>\r\n      <Paragraph>\r\n        A game where you have to guess the name of a randomly given song\r\n      </Paragraph>\r\n      <Button type=\"primary\" onClick={() => props.getRandomSongs()}>\r\n        Play\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainMenu;\r\n","import { useState } from \"react\";\nimport { Spin } from \"antd\";\nimport Result from \"./components/Result\";\nimport Round from \"./components/Round\";\nimport MainMenu from \"./components/MainMenu\";\nimport \"./App.css\";\n\nfunction App() {\n  const NUMBER_OF_SONGS = 20;\n\n  const [state, setState] = useState(0);\n  const [shouldSpin, setShouldSpin] = useState(false);\n  const [showRound, setShowRound] = useState(false);\n  const [showResult, setShowResult] = useState(false);\n  const [songs, setSongs] = useState({});\n  const [guessedSongs, setGuessedSongs] = useState(0);\n\n  async function getRandomSongs() {\n    setShouldSpin(true);\n\n    await fetch(\"https://spotify-song-guesser-api.herokuapp.com/v1/song\")\n      .then((response) => response.json())\n      .then((data) => {\n        setSongs(data);\n        console.log(data);\n        setShowRound(true);\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n      });\n\n    setShouldSpin(false);\n  }\n\n  function stateHandler(state) {\n    if (state === NUMBER_OF_SONGS - 1) {\n      setShowRound(false);\n      setShowResult(true);\n      return;\n    }\n\n    setState(state);\n  }\n\n  function restartHandler() {\n    setShowRound(false);\n    setShowResult(false);\n    setGuessedSongs(0);\n    setState(0);\n  }\n\n  return (\n    <div className=\"App\" key={showRound}>\n      {(!showRound && !showResult) && <MainMenu getRandomSongs={getRandomSongs} />}\n      {shouldSpin && <Spin></Spin>}\n      {showRound && (\n        <Round state={state} setState={stateHandler} guessedSongs={guessedSongs} setGuessedSongs={setGuessedSongs} songs={songs}></Round>\n      )}\n      {showResult && <Result guessedSongs={guessedSongs} restart={restartHandler}></Result>}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}